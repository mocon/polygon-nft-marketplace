import Head from 'next/head'
import { useState, useEffect } from 'react'
import { ethers } from 'ethers'
import axios from 'axios'
import Web3Modal from 'web3modal'

import { nftMarketAddress, nftAddress } from 'config'
import Market from 'artifacts/contracts/Market.sol/NFTMarket.json'
import NFT from 'artifacts/contracts/NFT.sol/NFT.json'
import type { NextPage } from 'next'
import type { MarketItem, NftData } from 'types'

const Home: NextPage = () => {
  const [nfts, setNfts] = useState<NftData[]>([])
  const [loading, setLoading] = useState<'not-loaded' | 'loaded'>('not-loaded')

  async function loadNfts() {
    const provider = new ethers.providers.JsonRpcProvider()
    const marketContract = new ethers.Contract(nftMarketAddress, Market.abi, provider)
    const tokenContract = new ethers.Contract(nftAddress, NFT.abi, provider)
    const data = await marketContract.fetchMarketItems()

    const items: NftData[] = await Promise.all(
      data.map(async (i: MarketItem) => {
        const tokenUri = await tokenContract.tokenURI(i.tokenId)
        const meta = await axios.get(tokenUri)
        const price = ethers.utils.formatUnits(i.price.toString(), 'ether')

        return {
          price,
          tokenId: i.tokenId,
          seller: i.seller,
          owner: i.owner,
          image: meta.data.image,
          name: meta.data.name,
          description: meta.data.description,
        }
      }),
    )
    setNfts(items)
    setLoading('loaded')
  }

  async function buyNft(nft: NftData) {
    const web3Modal = new Web3Modal()
    const connection = await web3Modal.connect()
    const provider = new ethers.providers.Web3Provider(connection)
    const signer = provider.getSigner()
    const contract = new ethers.Contract(nftMarketAddress, Market.abi, signer)
    const price = ethers.utils.parseUnits(nft.price.toString(), 'ether')
    const transaction = await contract.createMarketSale(nftAddress, nft.tokenId, {
      value: price,
    })
    await transaction.wait()
    loadNfts()
  }

  useEffect(() => {
    loadNfts()
  }, [])

  if (loading === 'loaded' && !nfts.length) return <h1 className='px-20 py-10 text-3xl'>No items in marketplace</h1>

  return (
    <>
      <Head>
        <title>Home - NFT Marketplace</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <div className='flex justify-center'>
        <div className='px-4' style={{ maxWidth: 1600 }}>
          <div className='grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4'>
            {nfts.map((nft) => (
              <div key={nft.tokenId} className='border shadow rounded-xl overflow-hidden'>
                <img src={nft.image} alt={nft.name} />
                <div className='p-4'>
                  <p style={{ height: 64 }} className='text-2xl font-semibold'>
                    {nft.name}
                  </p>
                  <div style={{ height: 70, overflow: 'hidden' }}>
                    <p className='text-gray-400'>{nft.description}</p>
                  </div>
                </div>
                <div className='p-4 bg-black'>
                  <p className='text-2xl mb-4 font-bold text-white'>{nft.price} ETH</p>
                  <button
                    className='w-full bg-pink-500 text-white font-bold py-2 px-12 rounded'
                    onClick={() => buyNft(nft)}
                  >
                    Buy
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </>
  )
}

export default Home
