import Head from 'next/head'
import { useRouter } from 'next/router'
import { useState, ChangeEvent } from 'react'
import { ethers } from 'ethers'
import { create as ipfsHttpClient } from 'ipfs-http-client'
import Web3Modal from 'web3modal'

import { nftMarketAddress, nftAddress } from 'config'
import Market from 'artifacts/contracts/Market.sol/NFTMarket.json'
import NFT from 'artifacts/contracts/NFT.sol/NFT.json'
import type { NextPage } from 'next'
import type { FormInput } from 'types'

const client = ipfsHttpClient({ url: 'https://ipfs.infura.io:5001/api/v0' })

const CreateItem: NextPage = () => {
  const router = useRouter()
  const [fileUrl, setFileUrl] = useState<string | null>(null)
  const [formInput, setFormInput] = useState<FormInput>({
    name: '',
    description: '',
    price: '',
  })

  async function onChange(event: ChangeEvent<HTMLInputElement>) {
    if (!event.target.files) return
    const file = event.target.files[0]

    try {
      const added = await client.add(file, {
        progress: (p) => console.log(`Received ${p}`),
      })
      setFileUrl(`https://ipfs.infura.io/ipfs/${added.path}`)
    } catch (error) {
      console.error(error)
    }
  }

  async function createItem() {
    const { name, description, price } = formInput
    if (!name || !description || !price || !fileUrl) return

    // Upload to IPFS
    const data = JSON.stringify({
      name,
      description,
      image: fileUrl,
    })

    try {
      const added = await client.add(data)
      const url = `https://ipfs.infura.io/ipfs/${added.path}`

      // After file is uploaded to IPFS, pass the URL to save it on Polygon
      createSale(url)
    } catch (error) {
      console.error(error)
    }
  }

  async function createSale(url: string) {
    const web3Modal = new Web3Modal()
    const connection = await web3Modal.connect()
    const provider = new ethers.providers.Web3Provider(connection)
    const signer = provider.getSigner()

    // Next, create the item
    let contract = new ethers.Contract(nftAddress, NFT.abi, signer)
    let transaction = await contract.createToken(url)
    let tx = await transaction.wait()
    let event = tx.events[0]
    let value = event.args[2]
    let tokenId = value.toNumber()

    const price = ethers.utils.parseUnits(formInput.price, 'ether')

    // Then list the item for sale on the marketplace
    contract = new ethers.Contract(nftMarketAddress, Market.abi, signer)
    let listingPrice = await contract.getListingPrice()
    listingPrice = listingPrice.toString()
    transaction = await contract.createMarketItem(nftAddress, tokenId, price, { value: listingPrice })
    await transaction.wait()
    router.push('/')
  }

  return (
    <>
      <Head>
        <title>Create Item - NFT Marketplace</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <div className='flex justify-center'>
        <div className='w-1/2 flex flex-col pb-12'>
          <input
            placeholder='Asset Name'
            className='mt-8 border rounded p-4'
            onChange={(e) => setFormInput({ ...formInput, name: e.target.value })}
          />
          <textarea
            placeholder='Asset Description'
            className='mt-2 border rounded p-4'
            onChange={(e) => setFormInput({ ...formInput, description: e.target.value })}
          />
          <input
            placeholder='Asset Price in MATIC'
            className='mt-2 border rounded p-4'
            onChange={(e) => setFormInput({ ...formInput, price: e.target.value })}
          />
          <input type='file' name='Asset' className='my-4' onChange={onChange} />

          {fileUrl && <img className='rounded mt-4' width={350} src={fileUrl} alt='NFT Image' />}

          <button onClick={createItem} className='font-bold mt-4 bg-green-500 text-white rounded p-4 shadow-lg'>
            Create Digital Asset
          </button>
        </div>
      </div>
    </>
  )
}

export default CreateItem
